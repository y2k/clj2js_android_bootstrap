"use strict";
const html = () => { return ["html", {"lang": "ru", "data-theme": "dark"}, ["head", ["meta", {"name": "viewport", "content": "width=device-width, initial-scale=1"}], ["link", {"rel": "stylesheet", "href": "css/pico.classless.css"}]], ["body", {"style": "user-select: none;"}, ["main", ["h3", {"id": "text1"}, "..."], ["h3", {"id": "text2"}, "..."], ["button", {"id": "btn"}, "Increment"], ["button", {"id": "btn3"}, "Open Settings"], ["button", {"id": "btn2"}, "Test sound"]], ["script", {"src": "js/main.js"}]]] };
const ALARM_PERCENT = 90;
const percent_ref = Array.of(0);
const charge_changed = (message) => { return (function () { const battery_percent = JSON.parse(message).level; return (battery_percent ? (function () { document.querySelector("#text1").innerHTML = ("" + "Battery: " + battery_percent + " / " + ALARM_PERCENT);; return (function () { const _ = (Array.from(percent_ref).at(0) < ALARM_PERCENT); return (_ ? (function () { percent_ref.pop(); percent_ref.push(battery_percent); return ((battery_percent >= ALARM_PERCENT) ? Android.play_alarm(4) : null) })() : null) })() })() : null) })() };
const main = () => { document.querySelector("#btn3").addEventListener("click", () => { return Android.open_settings() }); document.querySelector("#btn2").addEventListener("click", () => { document.querySelector("#text2").innerHTML = "BEFORE";; Android.play_alarm(2); return document.querySelector("#text2").innerHTML = "AFTER"; }); return (function () { const count_ref = Array.of(0); return document.querySelector("#btn").addEventListener("click", (function () { const count_ref = Array.of(0); return () => { count_ref.push((1 + count_ref.pop())); return document.querySelector("#text2").innerHTML = count_ref.at(0); } })()) })() };
(globalThis.navigator ? main() : (function () { const html_to_string = (node) => { return (function () { const tag = node.at(0); const attrs = node.at(1); const has_attrs = ((node.length > 1) && typeof node.at(1) === "object" && !Array.isArray(node.at(1))); return (typeof node === "string" ? node : ("" + "<" + tag + " " + (!has_attrs ? "" : Object.entries(attrs).reduce((a, x) => { return ("" + a + " " + x.at(0) + "='" + x.at(1) + "'") }, "")) + ">" + node.slice((has_attrs ? 2 : 1)).map(html_to_string).reduce((a, x) => { return ("" + a + x) }, "") + "</" + tag + ">")) })() };; return console.info(html_to_string(html())) })())
